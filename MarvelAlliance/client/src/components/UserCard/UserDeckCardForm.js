import React, { useState } from "react";
import { useHistory, useParams } from 'react-router-dom';
import { getMarvelCharacterByName } from "../../modules/heroApiManager";
import { addCard } from "../../modules/cardManager";
import Swal from "sweetalert2";
import "./UserDeckCard.css";

const UserDeckCardForm = () => {

    const [character, setCharacter] = useState("");
    const [characterInfo, setCharacterInfo] = useState([]);

    const history = useHistory();
    const { deckId } = useParams();

    const handleSetCharacter = (event) => {
        setCharacter(event.target.value);
    };

    const getCharacter = () => {
        getMarvelCharacterByName(character, "8f26faf3d251d1c35383404a75368f3a").then((marvelCharacter) => {
          setCharacterInfo(marvelCharacter);
        })
    };

    const saveNewCard = () => {
    //constructing character card object to save to db:
          const newCard = {
            //card id generated by back-end
            deckId: parseInt(deckId),
            characterName: characterInfo.name,
            //health: value generated by back-end
            power: characterInfo.powerstats.power,
            speed: characterInfo.powerstats.speed,
            strength: characterInfo.powerstats.strength,
            image: characterInfo.images.lg,
            description: characterInfo.description 
          }
          // Invoke addCard passing the new card object as an argument
          // Once complete, change the url and display the user card list
          addCard(newCard)
            .then(() => {
                Swal.fire({
                title: "New Card Created! ðŸ˜Š",
                icon: "info",
                confirmButtonColor: "#20B2AA"
                })
            }).then(() => {
                history.push(`/myDecks/${deckId}/cards`);
            });
    };


    return (
        <div>
            <div className="field cardForm">
                {/* <h1 className="cardForm__title">{ cardId ? "~Edit Card Description~" : "~New Card~" }</h1> */}
                <h1 className="cardForm__title">~New Card~</h1>
                <input className="input is-focused is-rounded nameInput" type="text" onChange={(event) => handleSetCharacter(event)} placeholder="Marvel Character Name..."></input>
                <button className="button is-rounded is-outlined is-light getCharacter" onClick={() => getCharacter()}>
                    Get Character<img src="https://img.icons8.com/color/48/000000/groot.png" alt="Get Character" />
                </button>
                <button className="button is-rounded is-outlined is-light addCharacter" onClick={() => saveNewCard()}>
                    Add Character<img src="https://img.icons8.com/color/48/000000/avengers.png" alt="Add Character"/>
                </button>
                {
                    characterInfo.length === 0 ? null :
                    <>
                        <p className="heroName">{characterInfo.name}</p>
                        <p className="heroDesc">{characterInfo.description}</p>
                        <img className="heroImg" src={characterInfo.images.md} />
                    </>
                }
                <div>
                <button className="button is-rounded is-light is-outlined returnCardBut" onClick={() => {history.push(`/myDecks/${deckId}/cards`)}}>Return to My Cards</button>
                </div>
            </div>
        </div>
    );
};


export default UserDeckCardForm;