import React, { useState, useEffect } from "react";
import { useHistory, useParams } from 'react-router-dom';
import { addDeck } from "../../modules/deckManager";
import Swal from "sweetalert2";

const DeckForm = () => {

    const [deck, setDeck] = useState({});
    const history = useHistory();
    // const { deckId } = useParams();

    // useEffect(() => {
    //     if (deckId) {
    //         getDeckById(deckId)
    //         .then(deck => {
    //             setDeck(deck)
    //         });
    //     }
    // }, []);

    // When a field changes, update state. The return will re-render and display based on the values in state:
    const handleInputChange = (event) => {
        /* When changing a state object or array,
        create a copy, make changes, and then set state.*/
        const newDeck = { ...deck }
        /* Dynamically set the properties of the deck obj to the new corresponding values
        using object bracket notation. */
        newDeck[event.target.id] = event.target.value
        // update state
        setDeck(newDeck)
    };

    const saveNewDeck = () => {
        //event.preventDefault() // Prevents the browser from refreshing when submitting the form
          const newDeck = {
            title: deck.title,
            details: deck.details
          }
          // Invoke addDeck passing the new deck object as an argument
          // Once complete, change the url and display the user deck list
          addDeck(newDeck)
            .then(() => history.push("/myDecks"));
    };

    // const saveEditDeck = (event) => {
    //     event.preventDefault() //Prevents the browser from refreshing when submitting the form
    //     updateDeck({
    //     //   id: deck.id, generated by backend
    //     //userProfileId: generated by backend
    //       title: deck.title,
    //       details: deck.details
    //     })
    //     .then(() => history.push(`/myDecks`))
    // };

    const handleClickSaveDeck = () => {
        //event.preventDefault() //Prevents the browser from refreshing when submitting the form

        const title = deck.title
        const details = deck.details

        if (title === "" || details === "") {
          Swal.fire({
            title: "Please provide values for both input fields. ðŸ‘‡",
            icon: "info",
            confirmButtonColor: "#20B2AA"
          });
        // } else {
        //   if (deckId) {
        //       //PUT - update
        //       saveEditDeck(event)
        //       Swal.fire({
        //         title: "Deck Updated! ðŸ˜Š",
        //         icon: "info",
        //         confirmButtonColor: "#20B2AA"
        //       });
          } else {
              saveNewDeck()
              Swal.fire({
                title: "New Deck Created! ðŸ˜Š",
                icon: "info",
                confirmButtonColor: "#20B2AA"
              });
        //   }
        };
    };

    // Reroute to My Decks page on cancel:
    const handleClickCancel = () => {
    // window.history.back();
        history.push("/myDecks");
    };

    return (
        <div>
            {/* <h1 className="deckForm__title">{deckId ? "Edit Deck" : "New Deck" }</h1> */}
            <div className="field">
                <label className="label">Title:</label>
                <div className="control">
                    <input className="input" type="text" id="title" value={deck.title} onChange={(event) => {handleInputChange(event)}} required autoFocus placeholder="Deck Title..." />
                    <span className="icon is-small is-right">
                    <i className="fas fa-check"></i>
                    </span>
                </div>
                <p className="help is-success">This title is marvelous!</p>

                <div className="field">
                    <label className="label">Details:</label>
                    <div className="control">
                        <textarea className="textarea" id="details" value={deck.details} onChange={(event) => {handleInputChange(event)}} required autoFocus placeholder="Deck Details..."></textarea>
                    </div>
                </div>

                <div className="field is-grouped">
                    <div className="control">
                        <button className="button is-black is-rounded" onClick={() => {handleClickSaveDeck()}}>Submit</button>
                        {/* { deckId ? "Save Deck" : "Add Deck" } */}
                    </div>
                    <div className="control">
                        <button className="button is-light is-rounded" onClick={() => {handleClickCancel()}}>Cancel</button>
                    </div>
                </div>
               
            </div>
        </div>
    );
};


export default DeckForm;