import React, { useState, useEffect } from "react";
import { useHistory, useParams } from 'react-router-dom';
import { addDeck, updateDeck, getDeckById } from "../../modules/deckManager";
import Swal from "sweetalert2";
import "./UserDeck.css"

const DeckForm = () => {

    const [deck, setDeck] = useState({});
    const history = useHistory();
    const [isLoading, setIsLoading] = useState(true);
    const { deckId } = useParams();

    useEffect(() => {
        if (deckId) {
            getDeckById(deckId)
            .then(deck => {
                setDeck(deck)
                setIsLoading(false)
            })
        } else {
            setIsLoading(false)
        }
    }, []);

    // When a field changes, update state. The return will re-render and display based on the values in state:
    const handleInputChange = (event) => {
        /* When changing a state object or array,
        create a copy, make changes, and then set state.*/
        const newDeck = { ...deck }
        /* Dynamically set the properties of the deck obj to the new corresponding values
        using object bracket notation. */
        newDeck[event.target.id] = event.target.value
        // update state
        setDeck(newDeck)
    };

    const saveNewDeck = () => {
        //event.preventDefault() // Prevents the browser from refreshing when submitting the form
          const newDeck = {
            title: deck.title,
            details: deck.details
          }
          // Invoke addDeck passing the new deck object as an argument
          // Once complete, change the url and display the user deck list
          addDeck(newDeck)
            .then(() => history.push("/myDecks"));
    };

    const saveEditDeck = () => {
        //event.preventDefault() //Prevents the browser from refreshing when submitting the form
        updateDeck({
        //   id: deck.id, pre-populated and generated by backend
        //userProfileId: pre-populated and generated by backend
          title: deck.title,
          details: deck.details
        })
        .then(() => history.push(`/myDecks`))
    };

    const handleClickSaveDeck = () => {
        //event.preventDefault() //Prevents the browser from refreshing when submitting the form

        const title = deck.title
        const details = deck.details

        if (title === "" || details === "") {
          Swal.fire({
            title: "Please provide values for both input fields. ðŸ‘‡",
            icon: "info",
            confirmButtonColor: "#20B2AA"
          });
        } else {
            setIsLoading(true);
        
          if (deckId) {
              //PUT - update
              saveEditDeck()
              Swal.fire({
                title: "Deck Updated! ðŸ˜Š",
                icon: "info",
                confirmButtonColor: "#20B2AA"
              });
          } else {
              saveNewDeck()
              Swal.fire({
                title: "New Deck Created! ðŸ˜Š",
                icon: "info",
                confirmButtonColor: "#20B2AA"
              });
          }
        };
    };

    // Reroute to My Decks page on cancel:
    const handleClickCancel = () => {
    // window.history.back();
        history.push("/myDecks");
    };

    return (
        <div>
            {/* <img className="newDeckLogo" src="./images/newDeckLogo.PNG" alt="New Deck" /> */}
            <div className="field deckForm">
                <h1 className="deckForm__title">{ deckId ? "~Edit Deck~" : "~New Deck~" }</h1>
                <label className="label deckFormLabel">Title:</label>
                <div className="control">
                    <input className="input deckFormInput" type="text" id="title" value={deck.title} onChange={(event) => {handleInputChange(event)}} required autoFocus placeholder="Give a marvelous title..." />
                    <span className="icon is-small is-right">
                    <i className="fas fa-check"></i>
                    </span>
                </div>

                <div className="field">
                    <label className="label deckFormLabel">Details:</label>
                    <div className="control">
                        <textarea className="textarea deckFormInput" id="details" value={deck.details} onChange={(event) => {handleInputChange(event)}} required autoFocus placeholder="Give marvelous details..."></textarea>
                    </div>
                </div>

                <div className="field is-grouped">
                    <div className="control">
                        <button className="button is-dark is-outlined is-rounded cancelDeckBut" onClick={() => {handleClickCancel()}}>Cancel</button>
                    </div>
                    <div className="control">
                        <button className="button is-dark is-outlined is-rounded add-deck-but" disabled={isLoading} onClick={() => {handleClickSaveDeck()}}>{ deckId ? "Save Deck" : "Add Deck" }</button>
                    </div>
                </div>
               
            </div>
        </div>
    );
};


export default DeckForm;